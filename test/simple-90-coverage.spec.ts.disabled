import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Lockx, MockERC20, MockERC721 } from '../typechain-types';
import { HardhatEthersSigner } from '@nomicfoundation/hardhat-ethers/signers';

describe('ðŸŽ¯ SIMPLE 90% COVERAGE BOOST', () => {
  let lockx: Lockx;
  let mockToken: MockERC20;
  let mockToken2: MockERC20;
  let mockNFT: MockERC721;
  let owner: HardhatEthersSigner;
  let user1: HardhatEthersSigner;
  let keyPair: HardhatEthersSigner;

  beforeEach(async () => {
    [owner, user1, keyPair] = await ethers.getSigners();

    const MockERC20Factory = await ethers.getContractFactory('MockERC20');
    mockToken = await MockERC20Factory.deploy();
    await mockToken.initialize('Mock Token', 'MOCK');
    mockToken2 = await MockERC20Factory.deploy();
    await mockToken2.initialize('Mock Token 2', 'MOCK2');

    const MockERC721Factory = await ethers.getContractFactory('MockERC721');
    mockNFT = await MockERC721Factory.deploy();
    await mockNFT.initialize('Mock NFT', 'MNFT');

    const LockxFactory = await ethers.getContractFactory('Lockx');
    lockx = await LockxFactory.deploy();

    await mockToken.mint(user1.address, ethers.parseEther('10000'));
    await mockToken2.mint(user1.address, ethers.parseEther('10000'));
    
    for(let i = 1; i <= 20; i++) {
      await mockNFT.mint(user1.address, i);
    }

    await mockToken.connect(user1).approve(await lockx.getAddress(), ethers.MaxUint256);
    await mockToken2.connect(user1).approve(await lockx.getAddress(), ethers.MaxUint256);
    await mockNFT.connect(user1).setApprovalForAll(await lockx.getAddress(), true);
  });

  it('Should improve Deposits coverage with edge cases', async () => {
    // Create lockbox with batch - multiple tokens and NFTs
    await lockx.connect(user1).createLockboxWithBatch(
      user1.address,
      keyPair.address,
      ethers.parseEther('1'),
      [await mockToken.getAddress(), await mockToken2.getAddress()],
      [ethers.parseEther('100'), ethers.parseEther('200')],
      [await mockNFT.getAddress(), await mockNFT.getAddress()],
      [1, 2],
      ethers.ZeroHash,
      { value: ethers.parseEther('1') }
    );

    // Access Deposits interface
    const deposits = await ethers.getContractAt('Deposits', await lockx.getAddress());
    
    // Add more deposits to trigger different branches
    await deposits.connect(user1).depositETH(0, { value: ethers.parseEther('2') });
    await deposits.connect(user1).depositERC20(0, await mockToken.getAddress(), ethers.parseEther('300'));
    await deposits.connect(user1).depositERC721(0, await mockNFT.getAddress(), 3);
    
    console.log('âœ… Deposits coverage improved');
  });

  it('Should improve Withdrawals coverage with swap scenarios', async () => {
    // Create lockbox with ETH and tokens
    await lockx.connect(user1).createLockboxWithBatch(
      user1.address,
      keyPair.address,
      ethers.parseEther('2'),
      [await mockToken.getAddress()],
      [ethers.parseEther('500')],
      [],
      [],
      ethers.ZeroHash,
      { value: ethers.parseEther('2') }
    );
    const tokenId = 0;

    // Deploy and setup mock router
    const MockSwapRouterFactory = await ethers.getContractFactory('MockSwapRouter');
    const mockRouter = await MockSwapRouterFactory.deploy();
    await mockToken2.mint(await mockRouter.getAddress(), ethers.parseEther('10000'));

    const domain = {
      name: 'Lockx',
      version: '4',
      chainId: await ethers.provider.getNetwork().then(n => n.chainId),
      verifyingContract: await lockx.getAddress()
    };

    const types = {
      Operation: [
        { name: 'tokenId', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'opType', type: 'uint8' },
        { name: 'dataHash', type: 'bytes32' }
      ]
    };

    // Test swap ETH for tokens
    let nonce = await lockx.connect(user1).getNonce(tokenId);
    let currentBlock = await ethers.provider.getBlock('latest');
    let signatureExpiry = currentBlock!.timestamp + 3600;

    const swapData = ethers.AbiCoder.defaultAbiCoder().encode(
      ['uint256', 'address', 'address', 'uint256', 'address', 'uint256', 'uint8', 'bytes', 'bytes32', 'address', 'uint256'],
      [
        tokenId,
        await mockRouter.getAddress(),
        ethers.ZeroAddress,
        ethers.parseEther('1'),
        await mockToken2.getAddress(),
        ethers.parseEther('1000'),
        0, // ETH_FOR_TOKENS
        '0x',
        ethers.ZeroHash,
        user1.address,
        signatureExpiry
      ]
    );

    const opValue = {
      tokenId,
      nonce,
      opType: 7, // SWAP
      dataHash: ethers.keccak256(swapData)
    };

    const signature = await keyPair.signTypedData(domain, types, opValue);
    const messageHash = ethers.TypedDataEncoder.hash(domain, types, opValue);

    await lockx.connect(user1).swapInLockbox(
      tokenId,
      messageHash,
      signature,
      await mockRouter.getAddress(),
      ethers.ZeroAddress,
      ethers.parseEther('1'),
      await mockToken2.getAddress(),
      ethers.parseEther('1000'),
      0,
      '0x',
      ethers.ZeroHash,
      signatureExpiry
    );

    console.log('âœ… Withdrawals swap coverage improved');
  });

  it('Should hit edge case branches in batch withdrawals', async () => {
    // Create lockbox with mixed assets
    await lockx.connect(user1).createLockboxWithBatch(
      user1.address,
      keyPair.address,
      ethers.parseEther('0.5'),
      [await mockToken.getAddress()],
      [ethers.parseEther('250')],
      [await mockNFT.getAddress()],
      [4],
      ethers.ZeroHash,
      { value: ethers.parseEther('0.5') }
    );
    const tokenId = 0;

    const domain = {
      name: 'Lockx',
      version: '4',
      chainId: await ethers.provider.getNetwork().then(n => n.chainId),
      verifyingContract: await lockx.getAddress()
    };

    const types = {
      Operation: [
        { name: 'tokenId', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'opType', type: 'uint8' },
        { name: 'dataHash', type: 'bytes32' }
      ]
    };

    // Partial batch withdrawal
    const nonce = await lockx.connect(user1).getNonce(tokenId);
    const currentBlock = await ethers.provider.getBlock('latest');
    const signatureExpiry = currentBlock!.timestamp + 3600;

    const batchData = ethers.AbiCoder.defaultAbiCoder().encode(
      ['uint256', 'uint256', 'address[]', 'uint256[]', 'address[]', 'uint256[]', 'address', 'bytes32', 'address', 'uint256'],
      [
        tokenId,
        ethers.parseEther('0.25'),
        [await mockToken.getAddress()],
        [ethers.parseEther('125')],
        [],
        [],
        user1.address,
        ethers.ZeroHash,
        user1.address,
        signatureExpiry
      ]
    );

    const opValue = {
      tokenId,
      nonce,
      opType: 6, // BATCH_WITHDRAW
      dataHash: ethers.keccak256(batchData)
    };

    const signature = await keyPair.signTypedData(domain, types, opValue);
    const messageHash = ethers.TypedDataEncoder.hash(domain, types, opValue);

    await lockx.connect(user1).batchWithdraw(
      tokenId,
      messageHash,
      signature,
      ethers.parseEther('0.25'),
      [await mockToken.getAddress()],
      [ethers.parseEther('125')],
      [],
      [],
      user1.address,
      ethers.ZeroHash,
      signatureExpiry
    );

    console.log('âœ… Batch withdrawal edge cases covered');
  });
});