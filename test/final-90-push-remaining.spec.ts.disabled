import { expect } from 'chai';
import { ethers } from 'hardhat';
import { Lockx, MockERC20, MockERC721, MockFeeOnTransferToken, RejectETH } from '../typechain-types';
import { HardhatEthersSigner } from '@nomicfoundation/hardhat-ethers/signers';

describe('ðŸš€ FINAL PUSH TO 90% - REMAINING BRANCHES', () => {
  let lockx: Lockx;
  let mockToken: MockERC20;
  let mockNFT: MockERC721;
  let feeToken: MockFeeOnTransferToken;
  let rejectETH: RejectETH;
  let owner: HardhatEthersSigner;
  let user1: HardhatEthersSigner;
  let keyPair: HardhatEthersSigner;

  beforeEach(async () => {
    [owner, user1, keyPair] = await ethers.getSigners();

    const MockERC20Factory = await ethers.getContractFactory('MockERC20');
    mockToken = await MockERC20Factory.deploy();
    await mockToken.initialize('Mock Token', 'MOCK');

    const MockERC721Factory = await ethers.getContractFactory('MockERC721');
    mockNFT = await MockERC721Factory.deploy();
    await mockNFT.initialize('Mock NFT', 'MNFT');

    const FeeTokenFactory = await ethers.getContractFactory('MockFeeOnTransferToken');
    feeToken = await FeeTokenFactory.deploy();
    await feeToken.initialize('Fee Token', 'FEE');

    const RejectETHFactory = await ethers.getContractFactory('RejectETH');
    rejectETH = await RejectETHFactory.deploy();

    const LockxFactory = await ethers.getContractFactory('Lockx');
    lockx = await LockxFactory.deploy();

    await mockToken.mint(user1.address, ethers.parseEther('1000'));
    await feeToken.mint(user1.address, ethers.parseEther('1000'));
    
    for(let i = 1; i <= 10; i++) {
      await mockNFT.mint(user1.address, i);
    }

    await mockToken.connect(user1).approve(await lockx.getAddress(), ethers.MaxUint256);
    await feeToken.connect(user1).approve(await lockx.getAddress(), ethers.MaxUint256);
    await mockNFT.connect(user1).setApprovalForAll(await lockx.getAddress(), true);
  });

  it('Should hit Withdrawals line 484 branch (swap with specific condition)', async () => {
    // Create lockbox with ETH for swapping
    await lockx.connect(user1).createLockboxWithETH(
      user1.address,
      keyPair.address,
      ethers.ZeroHash,
      { value: ethers.parseEther('1') }
    );
    const tokenId = 0;

    // Deploy mock swap router
    const MockSwapRouterFactory = await ethers.getContractFactory('MockSwapRouter');
    const mockRouter = await MockSwapRouterFactory.deploy();
    await mockToken.mint(await mockRouter.getAddress(), ethers.parseEther('1000'));

    const domain = {
      name: 'Lockx',
      version: '4',
      chainId: await ethers.provider.getNetwork().then(n => n.chainId),
      verifyingContract: await lockx.getAddress()
    };

    const types = {
      Operation: [
        { name: 'tokenId', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'opType', type: 'uint8' },
        { name: 'dataHash', type: 'bytes32' }
      ]
    };

    const nonce = await lockx.connect(user1).getNonce(tokenId);
    const currentBlock = await ethers.provider.getBlock('latest');
    const signatureExpiry = currentBlock!.timestamp + 3600;

    // Swap ETH for tokens
    const swapData = ethers.AbiCoder.defaultAbiCoder().encode(
      ['uint256', 'address', 'address', 'uint256', 'address', 'uint256', 'uint8', 'bytes', 'bytes32', 'address', 'uint256'],
      [
        tokenId,
        await mockRouter.getAddress(),
        ethers.ZeroAddress, // ETH
        ethers.parseEther('0.5'),
        await mockToken.getAddress(),
        ethers.parseEther('100'), // Expected amount
        0, // ETH_FOR_TOKENS
        '0x',
        ethers.ZeroHash,
        user1.address,
        signatureExpiry
      ]
    );

    const opValue = {
      tokenId,
      nonce,
      opType: 7, // SWAP
      dataHash: ethers.keccak256(swapData)
    };

    const signature = await keyPair.signTypedData(domain, types, opValue);
    const messageHash = ethers.TypedDataEncoder.hash(domain, types, opValue);

    await lockx.connect(user1).swapInLockbox(
      tokenId,
      messageHash,
      signature,
      await mockRouter.getAddress(),
      ethers.ZeroAddress,
      ethers.parseEther('0.5'),
      await mockToken.getAddress(),
      ethers.parseEther('100'),
      0,
      '0x',
      ethers.ZeroHash,
      signatureExpiry
    );

    console.log('âœ… Hit Withdrawals swap branch (line 484 area)');
  });

  it('Should hit Withdrawals line 545 branch (swap edge case)', async () => {
    // Create lockbox with tokens
    await lockx.connect(user1).createLockboxWithBatch(
      user1.address,
      keyPair.address,
      0,
      [await mockToken.getAddress()],
      [ethers.parseEther('500')],
      [],
      [],
      ethers.ZeroHash,
      { value: 0 }
    );
    const tokenId = 0;

    const MockSwapRouterFactory = await ethers.getContractFactory('MockSwapRouter');
    const mockRouter = await MockSwapRouterFactory.deploy();
    await mockToken.mint(await mockRouter.getAddress(), ethers.parseEther('1000'));

    const domain = {
      name: 'Lockx',
      version: '4',
      chainId: await ethers.provider.getNetwork().then(n => n.chainId),
      verifyingContract: await lockx.getAddress()
    };

    const types = {
      Operation: [
        { name: 'tokenId', type: 'uint256' },
        { name: 'nonce', type: 'uint256' },
        { name: 'opType', type: 'uint8' },
        { name: 'dataHash', type: 'bytes32' }
      ]
    };

    const nonce = await lockx.connect(user1).getNonce(tokenId);
    const currentBlock = await ethers.provider.getBlock('latest');
    const signatureExpiry = currentBlock!.timestamp + 3600;

    // Swap tokens for tokens
    const swapData = ethers.AbiCoder.defaultAbiCoder().encode(
      ['uint256', 'address', 'address', 'uint256', 'address', 'uint256', 'uint8', 'bytes', 'bytes32', 'address', 'uint256'],
      [
        tokenId,
        await mockRouter.getAddress(),
        await mockToken.getAddress(),
        ethers.parseEther('100'),
        await mockToken.getAddress(), // Same token swap
        ethers.parseEther('95'),
        1, // TOKENS_FOR_TOKENS
        '0x',
        ethers.ZeroHash,
        user1.address,
        signatureExpiry
      ]
    );

    const opValue = {
      tokenId,
      nonce,
      opType: 7, // SWAP
      dataHash: ethers.keccak256(swapData)
    };

    const signature = await keyPair.signTypedData(domain, types, opValue);
    const messageHash = ethers.TypedDataEncoder.hash(domain, types, opValue);

    await lockx.connect(user1).swapInLockbox(
      tokenId,
      messageHash,
      signature,
      await mockRouter.getAddress(),
      await mockToken.getAddress(),
      ethers.parseEther('100'),
      await mockToken.getAddress(),
      ethers.parseEther('95'),
      1,
      '0x',
      ethers.ZeroHash,
      signatureExpiry
    );

    console.log('âœ… Hit Withdrawals token swap branch');
  });

  it('Should hit various Deposits branches', async () => {
    // Create lockbox first
    await lockx.connect(user1).createLockboxWithETH(
      user1.address,
      keyPair.address,
      ethers.ZeroHash,
      { value: ethers.parseEther('0.1') }
    );

    // These functions are in the Deposits contract, accessed through Lockx
    // depositETH(uint256 tokenId)
    const DepositInterface = await ethers.getContractAt('Deposits', await lockx.getAddress());
    
    // Hit line 90 branch - deposit ETH
    await DepositInterface.connect(user1).depositETH(0, { value: ethers.parseEther('1') });
    console.log('âœ… Hit Deposits line 90 branch (ETH deposit)');

    // Hit line 115 branch - deposit ERC20
    await DepositInterface.connect(user1).depositERC20(
      0,
      await mockToken.getAddress(),
      ethers.parseEther('100')
    );
    console.log('âœ… Hit Deposits line 115 branch (ERC20 deposit)');

    // Hit line 140 branch - deposit ERC721
    await DepositInterface.connect(user1).depositERC721(
      0,
      await mockNFT.getAddress(),
      5
    );
    console.log('âœ… Hit Deposits line 140 branch (ERC721 deposit)');

    // Hit line 173 branch - batch deposit
    await DepositInterface.connect(user1).batchDeposit(
      0,
      ethers.parseEther('0.5'),
      [await mockToken.getAddress()],
      [ethers.parseEther('50')],
      [await mockNFT.getAddress()],
      [6],
      { value: ethers.parseEther('0.5') }
    );
    console.log('âœ… Hit Deposits line 173 branch (batch deposit)');
  });
});